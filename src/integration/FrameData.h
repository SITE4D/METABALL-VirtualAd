#pragma once

#include <opencv2/opencv.hpp>
#include <vector>
#include <cstdint>

namespace VirtualAd {
namespace Integration {

/**
 * @brief フレーム処理に必要なすべてのデータを保持する構造体
 * 
 * この構造体は、統合パイプライン内でフレームとその処理結果を
 * 管理するために使用されます。各処理段階（トラッキング、キーヤー、
 * レンダリング）の結果を保持し、スレッド間でデータを受け渡します。
 */
struct FrameData {
    // ========================================================================
    // 基本情報
    // ========================================================================
    
    /** フレームID（連番） */
    int64_t frame_id;
    
    /** タイムスタンプ（秒） */
    double timestamp;
    
    // ========================================================================
    // 画像データ
    // ========================================================================
    
    /** 入力画像（BGR、1920x1080） */
    cv::Mat image;
    
    // ========================================================================
    // トラッキング結果
    // ========================================================================
    
    /** トラッキング成功フラグ */
    bool tracking_success;
    
    /** 回転ベクトル（3x1、Rodrigues形式） */
    cv::Mat rvec;
    
    /** 並進ベクトル（3x1） */
    cv::Mat tvec;
    
    /** 検出されたバックネットコーナー（4点） */
    std::vector<cv::Point2f> corners;
    
    /** インライア数（RANSAC後） */
    int inlier_count;
    
    // ========================================================================
    // キーヤー結果
    // ========================================================================
    
    /** セグメンテーションマスク（CV_8UC1、0=背景、255=前景） */
    cv::Mat segmentation_mask;
    
    /** デプスマップ（CV_32FC1、正規化済み、0.0=近、1.0=遠） */
    cv::Mat depth_map;
    
    // ========================================================================
    // レンダリング結果
    // ========================================================================
    
    /** レンダリング済みバーチャル広告（BGR） */
    cv::Mat rendered_ad;
    
    /** 最終出力画像（BGR、1920x1080） */
    cv::Mat final_output;
    
    // ========================================================================
    // パフォーマンス統計
    // ========================================================================
    
    /** トラッキング処理時間（ミリ秒） */
    double tracking_time_ms;
    
    /** キーヤー処理時間（ミリ秒） */
    double keyer_time_ms;
    
    /** レンダリング処理時間（ミリ秒） */
    double rendering_time_ms;
    
    /** 総処理時間（ミリ秒） */
    double total_time_ms;
    
    // ========================================================================
    // コンストラクタ（Part 2で実装）
    // ========================================================================
    
    FrameData();
    
    // ========================================================================
    // ヘルパーメソッド（Part 2で実装）
    // ========================================================================
    
    void clear();
    bool validate() const;
};

} // namespace Integration
} // namespace VirtualAd
